// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_cluster_server

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"regexp"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func ClusterServerResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"api_version": schema.StringAttribute{
				Optional: true,
				Computed: true,
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^influxdb\\.eda\\.nokia\\.com/v1alpha1$"), ""),
				},
				Default: stringdefault.StaticString("influxdb.eda.nokia.com/v1alpha1"),
			},
			"kind": schema.StringAttribute{
				Optional: true,
				Computed: true,
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^ClusterServer$"), ""),
				},
				Default: stringdefault.StaticString("ClusterServer"),
			},
			"metadata": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"annotations": schema.MapAttribute{
						ElementType: types.StringType,
						Optional:    true,
						Computed:    true,
					},
					"labels": schema.MapAttribute{
						ElementType: types.StringType,
						Optional:    true,
						Computed:    true,
					},
					"name": schema.StringAttribute{
						Required: true,
						Validators: []validator.String{
							stringvalidator.LengthAtMost(253),
							stringvalidator.RegexMatches(regexp.MustCompile("^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"), ""),
						},
					},
				},
				CustomType: MetadataType{
					ObjectType: types.ObjectType{
						AttrTypes: MetadataValue{}.AttributeTypes(ctx),
					},
				},
				Required: true,
			},
			"name": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "name of the ClusterServer",
				MarkdownDescription: "name of the ClusterServer",
			},
			"spec": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"batch_size": schema.Int64Attribute{
						Optional:            true,
						Computed:            true,
						Description:         "Sets number of points sent in single request.",
						MarkdownDescription: "Sets number of points sent in single request.",
						Default:             int64default.StaticInt64(100),
					},
					"credentials_secret": schema.StringAttribute{
						Required:            true,
						Description:         "Secret containing InfluxDB credentials.\nthe secret must include a username and password keys or a token key.",
						MarkdownDescription: "Secret containing InfluxDB credentials.\nthe secret must include a username and password keys or a token key.",
					},
					"flush_timer": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Sets the write buffer flush timer.",
						MarkdownDescription: "Sets the write buffer flush timer.",
						Default:             stringdefault.StaticString("10s"),
					},
					"org": schema.StringAttribute{
						Required:            true,
						Description:         "InfluxDB Organization",
						MarkdownDescription: "InfluxDB Organization",
					},
					"timestamp_precision": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Sets the timestamp precision to use in writes for timestamp.",
						MarkdownDescription: "Sets the timestamp precision to use in writes for timestamp.",
						Validators: []validator.String{
							stringvalidator.OneOf(
								"seconds",
								"milliseconds",
								"microseconds",
								"nanoseconds",
							),
						},
						Default: stringdefault.StaticString("milliseconds"),
					},
					"tls": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"from_files": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{
									"ca_file": schema.StringAttribute{
										Optional:            true,
										Description:         "Path to a certificate authority file.",
										MarkdownDescription: "Path to a certificate authority file.",
									},
									"cert_file": schema.StringAttribute{
										Optional:            true,
										Description:         "The client certificate file location.",
										MarkdownDescription: "The client certificate file location.",
									},
									"key_file": schema.StringAttribute{
										Optional:            true,
										Description:         "The client private key location.",
										MarkdownDescription: "The client private key location.",
									},
									"skip_verify": schema.BoolAttribute{
										Optional:            true,
										Description:         "If true the client will not verify the server's certificate.",
										MarkdownDescription: "If true the client will not verify the server's certificate.",
									},
								},
								CustomType: FromFilesType{
									ObjectType: types.ObjectType{
										AttrTypes: FromFilesValue{}.AttributeTypes(ctx),
									},
								},
								Optional:            true,
								Description:         "Certificates files.",
								MarkdownDescription: "Certificates files.",
							},
							"from_secret": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{
									"name": schema.StringAttribute{
										Optional:            true,
										Description:         "Secret name containing a ca.crt, a tls.crt and a tls.key keys.",
										MarkdownDescription: "Secret name containing a ca.crt, a tls.crt and a tls.key keys.",
									},
								},
								CustomType: FromSecretType{
									ObjectType: types.ObjectType{
										AttrTypes: FromSecretValue{}.AttributeTypes(ctx),
									},
								},
								Optional:            true,
								Description:         "Secret containing a `tls.crt`, a `tls.key` and a `ca.crt` keys.\nBoth `tls.crt` and `tls.key` must be present. If `ca.crt` is not present\nthe remote server certificate is not verified.",
								MarkdownDescription: "Secret containing a `tls.crt`, a `tls.key` and a `ca.crt` keys.\nBoth `tls.crt` and `tls.key` must be present. If `ca.crt` is not present\nthe remote server certificate is not verified.",
							},
						},
						CustomType: TlsType{
							ObjectType: types.ObjectType{
								AttrTypes: TlsValue{}.AttributeTypes(ctx),
							},
						},
						Optional:            true,
						Description:         "Enable TLS.",
						MarkdownDescription: "Enable TLS.",
					},
					"url": schema.StringAttribute{
						Required:            true,
						Description:         "InfluxDB server URL",
						MarkdownDescription: "InfluxDB server URL",
					},
					"use_gzip": schema.BoolAttribute{
						Optional:            true,
						Description:         "When true, the exporter uses GZIP compression in write requests.",
						MarkdownDescription: "When true, the exporter uses GZIP compression in write requests.",
					},
				},
				CustomType: SpecType{
					ObjectType: types.ObjectType{
						AttrTypes: SpecValue{}.AttributeTypes(ctx),
					},
				},
				Required:            true,
				Description:         "ClusterServerSpec defines the desired state of ClusterServer",
				MarkdownDescription: "ClusterServerSpec defines the desired state of ClusterServer",
			},
			"status": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"connected": schema.BoolAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Specifies if the client is connected to the InfluxDB server",
						MarkdownDescription: "Specifies if the client is connected to the InfluxDB server",
					},
					"error": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Error value if the client is not connected",
						MarkdownDescription: "Error value if the client is not connected",
					},
					"last_checked": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Last time the connection was checked",
						MarkdownDescription: "Last time the connection was checked",
					},
				},
				CustomType: StatusType{
					ObjectType: types.ObjectType{
						AttrTypes: StatusValue{}.AttributeTypes(ctx),
					},
				},
				Optional:            true,
				Computed:            true,
				Description:         "ClusterServerStatus defines the observed state of ClusterServer",
				MarkdownDescription: "ClusterServerStatus defines the observed state of ClusterServer",
			},
		},
	}
}

type ClusterServerModel struct {
	ApiVersion types.String  `tfsdk:"api_version"`
	Kind       types.String  `tfsdk:"kind"`
	Metadata   MetadataValue `tfsdk:"metadata"`
	Name       types.String  `tfsdk:"name"`
	Spec       SpecValue     `tfsdk:"spec"`
	Status     StatusValue   `tfsdk:"status"`
}

var _ basetypes.ObjectTypable = MetadataType{}

type MetadataType struct {
	basetypes.ObjectType
}

func (t MetadataType) Equal(o attr.Type) bool {
	other, ok := o.(MetadataType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t MetadataType) String() string {
	return "MetadataType"
}

func (t MetadataType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	annotationsAttribute, ok := attributes["annotations"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`annotations is missing from object`)

		return nil, diags
	}

	annotationsVal, ok := annotationsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`annotations expected to be basetypes.MapValue, was: %T`, annotationsAttribute))
	}

	labelsAttribute, ok := attributes["labels"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`labels is missing from object`)

		return nil, diags
	}

	labelsVal, ok := labelsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`labels expected to be basetypes.MapValue, was: %T`, labelsAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return MetadataValue{
		Annotations: annotationsVal,
		Labels:      labelsVal,
		Name:        nameVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewMetadataValueNull() MetadataValue {
	return MetadataValue{
		state: attr.ValueStateNull,
	}
}

func NewMetadataValueUnknown() MetadataValue {
	return MetadataValue{
		state: attr.ValueStateUnknown,
	}
}

func NewMetadataValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (MetadataValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing MetadataValue Attribute Value",
				"While creating a MetadataValue value, a missing attribute value was detected. "+
					"A MetadataValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid MetadataValue Attribute Type",
				"While creating a MetadataValue value, an invalid attribute value was detected. "+
					"A MetadataValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra MetadataValue Attribute Value",
				"While creating a MetadataValue value, an extra attribute value was detected. "+
					"A MetadataValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra MetadataValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewMetadataValueUnknown(), diags
	}

	annotationsAttribute, ok := attributes["annotations"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`annotations is missing from object`)

		return NewMetadataValueUnknown(), diags
	}

	annotationsVal, ok := annotationsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`annotations expected to be basetypes.MapValue, was: %T`, annotationsAttribute))
	}

	labelsAttribute, ok := attributes["labels"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`labels is missing from object`)

		return NewMetadataValueUnknown(), diags
	}

	labelsVal, ok := labelsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`labels expected to be basetypes.MapValue, was: %T`, labelsAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewMetadataValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	if diags.HasError() {
		return NewMetadataValueUnknown(), diags
	}

	return MetadataValue{
		Annotations: annotationsVal,
		Labels:      labelsVal,
		Name:        nameVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewMetadataValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) MetadataValue {
	object, diags := NewMetadataValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewMetadataValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t MetadataType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewMetadataValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewMetadataValueUnknown(), nil
	}

	if in.IsNull() {
		return NewMetadataValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewMetadataValueMust(MetadataValue{}.AttributeTypes(ctx), attributes), nil
}

func (t MetadataType) ValueType(ctx context.Context) attr.Value {
	return MetadataValue{}
}

var _ basetypes.ObjectValuable = MetadataValue{}

type MetadataValue struct {
	Annotations basetypes.MapValue    `tfsdk:"annotations"`
	Labels      basetypes.MapValue    `tfsdk:"labels"`
	Name        basetypes.StringValue `tfsdk:"name"`
	state       attr.ValueState
}

func (v MetadataValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["annotations"] = basetypes.MapType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["labels"] = basetypes.MapType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.Annotations.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["annotations"] = val

		val, err = v.Labels.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["labels"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v MetadataValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v MetadataValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v MetadataValue) String() string {
	return "MetadataValue"
}

func (v MetadataValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var annotationsVal basetypes.MapValue
	switch {
	case v.Annotations.IsUnknown():
		annotationsVal = types.MapUnknown(types.StringType)
	case v.Annotations.IsNull():
		annotationsVal = types.MapNull(types.StringType)
	default:
		var d diag.Diagnostics
		annotationsVal, d = types.MapValue(types.StringType, v.Annotations.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"annotations": basetypes.MapType{
				ElemType: types.StringType,
			},
			"labels": basetypes.MapType{
				ElemType: types.StringType,
			},
			"name": basetypes.StringType{},
		}), diags
	}

	var labelsVal basetypes.MapValue
	switch {
	case v.Labels.IsUnknown():
		labelsVal = types.MapUnknown(types.StringType)
	case v.Labels.IsNull():
		labelsVal = types.MapNull(types.StringType)
	default:
		var d diag.Diagnostics
		labelsVal, d = types.MapValue(types.StringType, v.Labels.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"annotations": basetypes.MapType{
				ElemType: types.StringType,
			},
			"labels": basetypes.MapType{
				ElemType: types.StringType,
			},
			"name": basetypes.StringType{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"annotations": basetypes.MapType{
			ElemType: types.StringType,
		},
		"labels": basetypes.MapType{
			ElemType: types.StringType,
		},
		"name": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"annotations": annotationsVal,
			"labels":      labelsVal,
			"name":        v.Name,
		})

	return objVal, diags
}

func (v MetadataValue) Equal(o attr.Value) bool {
	other, ok := o.(MetadataValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Annotations.Equal(other.Annotations) {
		return false
	}

	if !v.Labels.Equal(other.Labels) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	return true
}

func (v MetadataValue) Type(ctx context.Context) attr.Type {
	return MetadataType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v MetadataValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"annotations": basetypes.MapType{
			ElemType: types.StringType,
		},
		"labels": basetypes.MapType{
			ElemType: types.StringType,
		},
		"name": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = SpecType{}

type SpecType struct {
	basetypes.ObjectType
}

func (t SpecType) Equal(o attr.Type) bool {
	other, ok := o.(SpecType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SpecType) String() string {
	return "SpecType"
}

func (t SpecType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	batchSizeAttribute, ok := attributes["batch_size"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`batch_size is missing from object`)

		return nil, diags
	}

	batchSizeVal, ok := batchSizeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`batch_size expected to be basetypes.Int64Value, was: %T`, batchSizeAttribute))
	}

	credentialsSecretAttribute, ok := attributes["credentials_secret"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`credentials_secret is missing from object`)

		return nil, diags
	}

	credentialsSecretVal, ok := credentialsSecretAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`credentials_secret expected to be basetypes.StringValue, was: %T`, credentialsSecretAttribute))
	}

	flushTimerAttribute, ok := attributes["flush_timer"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`flush_timer is missing from object`)

		return nil, diags
	}

	flushTimerVal, ok := flushTimerAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`flush_timer expected to be basetypes.StringValue, was: %T`, flushTimerAttribute))
	}

	orgAttribute, ok := attributes["org"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`org is missing from object`)

		return nil, diags
	}

	orgVal, ok := orgAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`org expected to be basetypes.StringValue, was: %T`, orgAttribute))
	}

	timestampPrecisionAttribute, ok := attributes["timestamp_precision"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`timestamp_precision is missing from object`)

		return nil, diags
	}

	timestampPrecisionVal, ok := timestampPrecisionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`timestamp_precision expected to be basetypes.StringValue, was: %T`, timestampPrecisionAttribute))
	}

	tlsAttribute, ok := attributes["tls"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tls is missing from object`)

		return nil, diags
	}

	tlsVal, ok := tlsAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tls expected to be basetypes.ObjectValue, was: %T`, tlsAttribute))
	}

	urlAttribute, ok := attributes["url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`url is missing from object`)

		return nil, diags
	}

	urlVal, ok := urlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`url expected to be basetypes.StringValue, was: %T`, urlAttribute))
	}

	useGzipAttribute, ok := attributes["use_gzip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`use_gzip is missing from object`)

		return nil, diags
	}

	useGzipVal, ok := useGzipAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`use_gzip expected to be basetypes.BoolValue, was: %T`, useGzipAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return SpecValue{
		BatchSize:          batchSizeVal,
		CredentialsSecret:  credentialsSecretVal,
		FlushTimer:         flushTimerVal,
		Org:                orgVal,
		TimestampPrecision: timestampPrecisionVal,
		Tls:                tlsVal,
		Url:                urlVal,
		UseGzip:            useGzipVal,
		state:              attr.ValueStateKnown,
	}, diags
}

func NewSpecValueNull() SpecValue {
	return SpecValue{
		state: attr.ValueStateNull,
	}
}

func NewSpecValueUnknown() SpecValue {
	return SpecValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSpecValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SpecValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SpecValue Attribute Value",
				"While creating a SpecValue value, a missing attribute value was detected. "+
					"A SpecValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SpecValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SpecValue Attribute Type",
				"While creating a SpecValue value, an invalid attribute value was detected. "+
					"A SpecValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SpecValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SpecValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SpecValue Attribute Value",
				"While creating a SpecValue value, an extra attribute value was detected. "+
					"A SpecValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SpecValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSpecValueUnknown(), diags
	}

	batchSizeAttribute, ok := attributes["batch_size"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`batch_size is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	batchSizeVal, ok := batchSizeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`batch_size expected to be basetypes.Int64Value, was: %T`, batchSizeAttribute))
	}

	credentialsSecretAttribute, ok := attributes["credentials_secret"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`credentials_secret is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	credentialsSecretVal, ok := credentialsSecretAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`credentials_secret expected to be basetypes.StringValue, was: %T`, credentialsSecretAttribute))
	}

	flushTimerAttribute, ok := attributes["flush_timer"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`flush_timer is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	flushTimerVal, ok := flushTimerAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`flush_timer expected to be basetypes.StringValue, was: %T`, flushTimerAttribute))
	}

	orgAttribute, ok := attributes["org"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`org is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	orgVal, ok := orgAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`org expected to be basetypes.StringValue, was: %T`, orgAttribute))
	}

	timestampPrecisionAttribute, ok := attributes["timestamp_precision"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`timestamp_precision is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	timestampPrecisionVal, ok := timestampPrecisionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`timestamp_precision expected to be basetypes.StringValue, was: %T`, timestampPrecisionAttribute))
	}

	tlsAttribute, ok := attributes["tls"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tls is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	tlsVal, ok := tlsAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tls expected to be basetypes.ObjectValue, was: %T`, tlsAttribute))
	}

	urlAttribute, ok := attributes["url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`url is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	urlVal, ok := urlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`url expected to be basetypes.StringValue, was: %T`, urlAttribute))
	}

	useGzipAttribute, ok := attributes["use_gzip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`use_gzip is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	useGzipVal, ok := useGzipAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`use_gzip expected to be basetypes.BoolValue, was: %T`, useGzipAttribute))
	}

	if diags.HasError() {
		return NewSpecValueUnknown(), diags
	}

	return SpecValue{
		BatchSize:          batchSizeVal,
		CredentialsSecret:  credentialsSecretVal,
		FlushTimer:         flushTimerVal,
		Org:                orgVal,
		TimestampPrecision: timestampPrecisionVal,
		Tls:                tlsVal,
		Url:                urlVal,
		UseGzip:            useGzipVal,
		state:              attr.ValueStateKnown,
	}, diags
}

func NewSpecValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SpecValue {
	object, diags := NewSpecValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSpecValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SpecType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSpecValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSpecValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSpecValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSpecValueMust(SpecValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SpecType) ValueType(ctx context.Context) attr.Value {
	return SpecValue{}
}

var _ basetypes.ObjectValuable = SpecValue{}

type SpecValue struct {
	BatchSize          basetypes.Int64Value  `tfsdk:"batch_size"`
	CredentialsSecret  basetypes.StringValue `tfsdk:"credentials_secret"`
	FlushTimer         basetypes.StringValue `tfsdk:"flush_timer"`
	Org                basetypes.StringValue `tfsdk:"org"`
	TimestampPrecision basetypes.StringValue `tfsdk:"timestamp_precision"`
	Tls                basetypes.ObjectValue `tfsdk:"tls"`
	Url                basetypes.StringValue `tfsdk:"url"`
	UseGzip            basetypes.BoolValue   `tfsdk:"use_gzip"`
	state              attr.ValueState
}

func (v SpecValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 8)

	var val tftypes.Value
	var err error

	attrTypes["batch_size"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["credentials_secret"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["flush_timer"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["org"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["timestamp_precision"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["tls"] = basetypes.ObjectType{
		AttrTypes: TlsValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["url"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["use_gzip"] = basetypes.BoolType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 8)

		val, err = v.BatchSize.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["batch_size"] = val

		val, err = v.CredentialsSecret.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["credentials_secret"] = val

		val, err = v.FlushTimer.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["flush_timer"] = val

		val, err = v.Org.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["org"] = val

		val, err = v.TimestampPrecision.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["timestamp_precision"] = val

		val, err = v.Tls.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["tls"] = val

		val, err = v.Url.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["url"] = val

		val, err = v.UseGzip.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["use_gzip"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SpecValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SpecValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SpecValue) String() string {
	return "SpecValue"
}

func (v SpecValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var tls basetypes.ObjectValue

	if v.Tls.IsNull() {
		tls = types.ObjectNull(
			TlsValue{}.AttributeTypes(ctx),
		)
	}

	if v.Tls.IsUnknown() {
		tls = types.ObjectUnknown(
			TlsValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Tls.IsNull() && !v.Tls.IsUnknown() {
		tls = types.ObjectValueMust(
			TlsValue{}.AttributeTypes(ctx),
			v.Tls.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"batch_size":          basetypes.Int64Type{},
		"credentials_secret":  basetypes.StringType{},
		"flush_timer":         basetypes.StringType{},
		"org":                 basetypes.StringType{},
		"timestamp_precision": basetypes.StringType{},
		"tls": basetypes.ObjectType{
			AttrTypes: TlsValue{}.AttributeTypes(ctx),
		},
		"url":      basetypes.StringType{},
		"use_gzip": basetypes.BoolType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"batch_size":          v.BatchSize,
			"credentials_secret":  v.CredentialsSecret,
			"flush_timer":         v.FlushTimer,
			"org":                 v.Org,
			"timestamp_precision": v.TimestampPrecision,
			"tls":                 tls,
			"url":                 v.Url,
			"use_gzip":            v.UseGzip,
		})

	return objVal, diags
}

func (v SpecValue) Equal(o attr.Value) bool {
	other, ok := o.(SpecValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.BatchSize.Equal(other.BatchSize) {
		return false
	}

	if !v.CredentialsSecret.Equal(other.CredentialsSecret) {
		return false
	}

	if !v.FlushTimer.Equal(other.FlushTimer) {
		return false
	}

	if !v.Org.Equal(other.Org) {
		return false
	}

	if !v.TimestampPrecision.Equal(other.TimestampPrecision) {
		return false
	}

	if !v.Tls.Equal(other.Tls) {
		return false
	}

	if !v.Url.Equal(other.Url) {
		return false
	}

	if !v.UseGzip.Equal(other.UseGzip) {
		return false
	}

	return true
}

func (v SpecValue) Type(ctx context.Context) attr.Type {
	return SpecType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SpecValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"batch_size":          basetypes.Int64Type{},
		"credentials_secret":  basetypes.StringType{},
		"flush_timer":         basetypes.StringType{},
		"org":                 basetypes.StringType{},
		"timestamp_precision": basetypes.StringType{},
		"tls": basetypes.ObjectType{
			AttrTypes: TlsValue{}.AttributeTypes(ctx),
		},
		"url":      basetypes.StringType{},
		"use_gzip": basetypes.BoolType{},
	}
}

var _ basetypes.ObjectTypable = TlsType{}

type TlsType struct {
	basetypes.ObjectType
}

func (t TlsType) Equal(o attr.Type) bool {
	other, ok := o.(TlsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t TlsType) String() string {
	return "TlsType"
}

func (t TlsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	fromFilesAttribute, ok := attributes["from_files"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`from_files is missing from object`)

		return nil, diags
	}

	fromFilesVal, ok := fromFilesAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`from_files expected to be basetypes.ObjectValue, was: %T`, fromFilesAttribute))
	}

	fromSecretAttribute, ok := attributes["from_secret"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`from_secret is missing from object`)

		return nil, diags
	}

	fromSecretVal, ok := fromSecretAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`from_secret expected to be basetypes.ObjectValue, was: %T`, fromSecretAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return TlsValue{
		FromFiles:  fromFilesVal,
		FromSecret: fromSecretVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewTlsValueNull() TlsValue {
	return TlsValue{
		state: attr.ValueStateNull,
	}
}

func NewTlsValueUnknown() TlsValue {
	return TlsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewTlsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (TlsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing TlsValue Attribute Value",
				"While creating a TlsValue value, a missing attribute value was detected. "+
					"A TlsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TlsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid TlsValue Attribute Type",
				"While creating a TlsValue value, an invalid attribute value was detected. "+
					"A TlsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TlsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("TlsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra TlsValue Attribute Value",
				"While creating a TlsValue value, an extra attribute value was detected. "+
					"A TlsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra TlsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewTlsValueUnknown(), diags
	}

	fromFilesAttribute, ok := attributes["from_files"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`from_files is missing from object`)

		return NewTlsValueUnknown(), diags
	}

	fromFilesVal, ok := fromFilesAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`from_files expected to be basetypes.ObjectValue, was: %T`, fromFilesAttribute))
	}

	fromSecretAttribute, ok := attributes["from_secret"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`from_secret is missing from object`)

		return NewTlsValueUnknown(), diags
	}

	fromSecretVal, ok := fromSecretAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`from_secret expected to be basetypes.ObjectValue, was: %T`, fromSecretAttribute))
	}

	if diags.HasError() {
		return NewTlsValueUnknown(), diags
	}

	return TlsValue{
		FromFiles:  fromFilesVal,
		FromSecret: fromSecretVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewTlsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) TlsValue {
	object, diags := NewTlsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewTlsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t TlsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewTlsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewTlsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewTlsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewTlsValueMust(TlsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t TlsType) ValueType(ctx context.Context) attr.Value {
	return TlsValue{}
}

var _ basetypes.ObjectValuable = TlsValue{}

type TlsValue struct {
	FromFiles  basetypes.ObjectValue `tfsdk:"from_files"`
	FromSecret basetypes.ObjectValue `tfsdk:"from_secret"`
	state      attr.ValueState
}

func (v TlsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["from_files"] = basetypes.ObjectType{
		AttrTypes: FromFilesValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["from_secret"] = basetypes.ObjectType{
		AttrTypes: FromSecretValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.FromFiles.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["from_files"] = val

		val, err = v.FromSecret.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["from_secret"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v TlsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v TlsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v TlsValue) String() string {
	return "TlsValue"
}

func (v TlsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var fromFiles basetypes.ObjectValue

	if v.FromFiles.IsNull() {
		fromFiles = types.ObjectNull(
			FromFilesValue{}.AttributeTypes(ctx),
		)
	}

	if v.FromFiles.IsUnknown() {
		fromFiles = types.ObjectUnknown(
			FromFilesValue{}.AttributeTypes(ctx),
		)
	}

	if !v.FromFiles.IsNull() && !v.FromFiles.IsUnknown() {
		fromFiles = types.ObjectValueMust(
			FromFilesValue{}.AttributeTypes(ctx),
			v.FromFiles.Attributes(),
		)
	}

	var fromSecret basetypes.ObjectValue

	if v.FromSecret.IsNull() {
		fromSecret = types.ObjectNull(
			FromSecretValue{}.AttributeTypes(ctx),
		)
	}

	if v.FromSecret.IsUnknown() {
		fromSecret = types.ObjectUnknown(
			FromSecretValue{}.AttributeTypes(ctx),
		)
	}

	if !v.FromSecret.IsNull() && !v.FromSecret.IsUnknown() {
		fromSecret = types.ObjectValueMust(
			FromSecretValue{}.AttributeTypes(ctx),
			v.FromSecret.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"from_files": basetypes.ObjectType{
			AttrTypes: FromFilesValue{}.AttributeTypes(ctx),
		},
		"from_secret": basetypes.ObjectType{
			AttrTypes: FromSecretValue{}.AttributeTypes(ctx),
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"from_files":  fromFiles,
			"from_secret": fromSecret,
		})

	return objVal, diags
}

func (v TlsValue) Equal(o attr.Value) bool {
	other, ok := o.(TlsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.FromFiles.Equal(other.FromFiles) {
		return false
	}

	if !v.FromSecret.Equal(other.FromSecret) {
		return false
	}

	return true
}

func (v TlsValue) Type(ctx context.Context) attr.Type {
	return TlsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v TlsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"from_files": basetypes.ObjectType{
			AttrTypes: FromFilesValue{}.AttributeTypes(ctx),
		},
		"from_secret": basetypes.ObjectType{
			AttrTypes: FromSecretValue{}.AttributeTypes(ctx),
		},
	}
}

var _ basetypes.ObjectTypable = FromFilesType{}

type FromFilesType struct {
	basetypes.ObjectType
}

func (t FromFilesType) Equal(o attr.Type) bool {
	other, ok := o.(FromFilesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t FromFilesType) String() string {
	return "FromFilesType"
}

func (t FromFilesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	caFileAttribute, ok := attributes["ca_file"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ca_file is missing from object`)

		return nil, diags
	}

	caFileVal, ok := caFileAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ca_file expected to be basetypes.StringValue, was: %T`, caFileAttribute))
	}

	certFileAttribute, ok := attributes["cert_file"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cert_file is missing from object`)

		return nil, diags
	}

	certFileVal, ok := certFileAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cert_file expected to be basetypes.StringValue, was: %T`, certFileAttribute))
	}

	keyFileAttribute, ok := attributes["key_file"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key_file is missing from object`)

		return nil, diags
	}

	keyFileVal, ok := keyFileAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key_file expected to be basetypes.StringValue, was: %T`, keyFileAttribute))
	}

	skipVerifyAttribute, ok := attributes["skip_verify"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`skip_verify is missing from object`)

		return nil, diags
	}

	skipVerifyVal, ok := skipVerifyAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`skip_verify expected to be basetypes.BoolValue, was: %T`, skipVerifyAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return FromFilesValue{
		CaFile:     caFileVal,
		CertFile:   certFileVal,
		KeyFile:    keyFileVal,
		SkipVerify: skipVerifyVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewFromFilesValueNull() FromFilesValue {
	return FromFilesValue{
		state: attr.ValueStateNull,
	}
}

func NewFromFilesValueUnknown() FromFilesValue {
	return FromFilesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewFromFilesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (FromFilesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing FromFilesValue Attribute Value",
				"While creating a FromFilesValue value, a missing attribute value was detected. "+
					"A FromFilesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("FromFilesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid FromFilesValue Attribute Type",
				"While creating a FromFilesValue value, an invalid attribute value was detected. "+
					"A FromFilesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("FromFilesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("FromFilesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra FromFilesValue Attribute Value",
				"While creating a FromFilesValue value, an extra attribute value was detected. "+
					"A FromFilesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra FromFilesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewFromFilesValueUnknown(), diags
	}

	caFileAttribute, ok := attributes["ca_file"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ca_file is missing from object`)

		return NewFromFilesValueUnknown(), diags
	}

	caFileVal, ok := caFileAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ca_file expected to be basetypes.StringValue, was: %T`, caFileAttribute))
	}

	certFileAttribute, ok := attributes["cert_file"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cert_file is missing from object`)

		return NewFromFilesValueUnknown(), diags
	}

	certFileVal, ok := certFileAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cert_file expected to be basetypes.StringValue, was: %T`, certFileAttribute))
	}

	keyFileAttribute, ok := attributes["key_file"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key_file is missing from object`)

		return NewFromFilesValueUnknown(), diags
	}

	keyFileVal, ok := keyFileAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key_file expected to be basetypes.StringValue, was: %T`, keyFileAttribute))
	}

	skipVerifyAttribute, ok := attributes["skip_verify"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`skip_verify is missing from object`)

		return NewFromFilesValueUnknown(), diags
	}

	skipVerifyVal, ok := skipVerifyAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`skip_verify expected to be basetypes.BoolValue, was: %T`, skipVerifyAttribute))
	}

	if diags.HasError() {
		return NewFromFilesValueUnknown(), diags
	}

	return FromFilesValue{
		CaFile:     caFileVal,
		CertFile:   certFileVal,
		KeyFile:    keyFileVal,
		SkipVerify: skipVerifyVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewFromFilesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) FromFilesValue {
	object, diags := NewFromFilesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewFromFilesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t FromFilesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewFromFilesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewFromFilesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewFromFilesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewFromFilesValueMust(FromFilesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t FromFilesType) ValueType(ctx context.Context) attr.Value {
	return FromFilesValue{}
}

var _ basetypes.ObjectValuable = FromFilesValue{}

type FromFilesValue struct {
	CaFile     basetypes.StringValue `tfsdk:"ca_file"`
	CertFile   basetypes.StringValue `tfsdk:"cert_file"`
	KeyFile    basetypes.StringValue `tfsdk:"key_file"`
	SkipVerify basetypes.BoolValue   `tfsdk:"skip_verify"`
	state      attr.ValueState
}

func (v FromFilesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["ca_file"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["cert_file"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["key_file"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["skip_verify"] = basetypes.BoolType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.CaFile.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ca_file"] = val

		val, err = v.CertFile.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["cert_file"] = val

		val, err = v.KeyFile.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["key_file"] = val

		val, err = v.SkipVerify.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["skip_verify"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v FromFilesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v FromFilesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v FromFilesValue) String() string {
	return "FromFilesValue"
}

func (v FromFilesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"ca_file":     basetypes.StringType{},
		"cert_file":   basetypes.StringType{},
		"key_file":    basetypes.StringType{},
		"skip_verify": basetypes.BoolType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"ca_file":     v.CaFile,
			"cert_file":   v.CertFile,
			"key_file":    v.KeyFile,
			"skip_verify": v.SkipVerify,
		})

	return objVal, diags
}

func (v FromFilesValue) Equal(o attr.Value) bool {
	other, ok := o.(FromFilesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CaFile.Equal(other.CaFile) {
		return false
	}

	if !v.CertFile.Equal(other.CertFile) {
		return false
	}

	if !v.KeyFile.Equal(other.KeyFile) {
		return false
	}

	if !v.SkipVerify.Equal(other.SkipVerify) {
		return false
	}

	return true
}

func (v FromFilesValue) Type(ctx context.Context) attr.Type {
	return FromFilesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v FromFilesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"ca_file":     basetypes.StringType{},
		"cert_file":   basetypes.StringType{},
		"key_file":    basetypes.StringType{},
		"skip_verify": basetypes.BoolType{},
	}
}

var _ basetypes.ObjectTypable = FromSecretType{}

type FromSecretType struct {
	basetypes.ObjectType
}

func (t FromSecretType) Equal(o attr.Type) bool {
	other, ok := o.(FromSecretType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t FromSecretType) String() string {
	return "FromSecretType"
}

func (t FromSecretType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return FromSecretValue{
		Name:  nameVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewFromSecretValueNull() FromSecretValue {
	return FromSecretValue{
		state: attr.ValueStateNull,
	}
}

func NewFromSecretValueUnknown() FromSecretValue {
	return FromSecretValue{
		state: attr.ValueStateUnknown,
	}
}

func NewFromSecretValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (FromSecretValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing FromSecretValue Attribute Value",
				"While creating a FromSecretValue value, a missing attribute value was detected. "+
					"A FromSecretValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("FromSecretValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid FromSecretValue Attribute Type",
				"While creating a FromSecretValue value, an invalid attribute value was detected. "+
					"A FromSecretValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("FromSecretValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("FromSecretValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra FromSecretValue Attribute Value",
				"While creating a FromSecretValue value, an extra attribute value was detected. "+
					"A FromSecretValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra FromSecretValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewFromSecretValueUnknown(), diags
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewFromSecretValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	if diags.HasError() {
		return NewFromSecretValueUnknown(), diags
	}

	return FromSecretValue{
		Name:  nameVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewFromSecretValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) FromSecretValue {
	object, diags := NewFromSecretValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewFromSecretValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t FromSecretType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewFromSecretValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewFromSecretValueUnknown(), nil
	}

	if in.IsNull() {
		return NewFromSecretValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewFromSecretValueMust(FromSecretValue{}.AttributeTypes(ctx), attributes), nil
}

func (t FromSecretType) ValueType(ctx context.Context) attr.Value {
	return FromSecretValue{}
}

var _ basetypes.ObjectValuable = FromSecretValue{}

type FromSecretValue struct {
	Name  basetypes.StringValue `tfsdk:"name"`
	state attr.ValueState
}

func (v FromSecretValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 1)

	var val tftypes.Value
	var err error

	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 1)

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v FromSecretValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v FromSecretValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v FromSecretValue) String() string {
	return "FromSecretValue"
}

func (v FromSecretValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"name": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"name": v.Name,
		})

	return objVal, diags
}

func (v FromSecretValue) Equal(o attr.Value) bool {
	other, ok := o.(FromSecretValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	return true
}

func (v FromSecretValue) Type(ctx context.Context) attr.Type {
	return FromSecretType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v FromSecretValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"name": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = StatusType{}

type StatusType struct {
	basetypes.ObjectType
}

func (t StatusType) Equal(o attr.Type) bool {
	other, ok := o.(StatusType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t StatusType) String() string {
	return "StatusType"
}

func (t StatusType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	connectedAttribute, ok := attributes["connected"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`connected is missing from object`)

		return nil, diags
	}

	connectedVal, ok := connectedAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`connected expected to be basetypes.BoolValue, was: %T`, connectedAttribute))
	}

	errorAttribute, ok := attributes["error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`error is missing from object`)

		return nil, diags
	}

	errorVal, ok := errorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`error expected to be basetypes.StringValue, was: %T`, errorAttribute))
	}

	lastCheckedAttribute, ok := attributes["last_checked"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`last_checked is missing from object`)

		return nil, diags
	}

	lastCheckedVal, ok := lastCheckedAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`last_checked expected to be basetypes.StringValue, was: %T`, lastCheckedAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return StatusValue{
		Connected:   connectedVal,
		Error:       errorVal,
		LastChecked: lastCheckedVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewStatusValueNull() StatusValue {
	return StatusValue{
		state: attr.ValueStateNull,
	}
}

func NewStatusValueUnknown() StatusValue {
	return StatusValue{
		state: attr.ValueStateUnknown,
	}
}

func NewStatusValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (StatusValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing StatusValue Attribute Value",
				"While creating a StatusValue value, a missing attribute value was detected. "+
					"A StatusValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("StatusValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid StatusValue Attribute Type",
				"While creating a StatusValue value, an invalid attribute value was detected. "+
					"A StatusValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("StatusValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("StatusValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra StatusValue Attribute Value",
				"While creating a StatusValue value, an extra attribute value was detected. "+
					"A StatusValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra StatusValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewStatusValueUnknown(), diags
	}

	connectedAttribute, ok := attributes["connected"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`connected is missing from object`)

		return NewStatusValueUnknown(), diags
	}

	connectedVal, ok := connectedAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`connected expected to be basetypes.BoolValue, was: %T`, connectedAttribute))
	}

	errorAttribute, ok := attributes["error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`error is missing from object`)

		return NewStatusValueUnknown(), diags
	}

	errorVal, ok := errorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`error expected to be basetypes.StringValue, was: %T`, errorAttribute))
	}

	lastCheckedAttribute, ok := attributes["last_checked"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`last_checked is missing from object`)

		return NewStatusValueUnknown(), diags
	}

	lastCheckedVal, ok := lastCheckedAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`last_checked expected to be basetypes.StringValue, was: %T`, lastCheckedAttribute))
	}

	if diags.HasError() {
		return NewStatusValueUnknown(), diags
	}

	return StatusValue{
		Connected:   connectedVal,
		Error:       errorVal,
		LastChecked: lastCheckedVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewStatusValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) StatusValue {
	object, diags := NewStatusValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewStatusValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t StatusType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewStatusValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewStatusValueUnknown(), nil
	}

	if in.IsNull() {
		return NewStatusValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewStatusValueMust(StatusValue{}.AttributeTypes(ctx), attributes), nil
}

func (t StatusType) ValueType(ctx context.Context) attr.Value {
	return StatusValue{}
}

var _ basetypes.ObjectValuable = StatusValue{}

type StatusValue struct {
	Connected   basetypes.BoolValue   `tfsdk:"connected"`
	Error       basetypes.StringValue `tfsdk:"error"`
	LastChecked basetypes.StringValue `tfsdk:"last_checked"`
	state       attr.ValueState
}

func (v StatusValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["connected"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["error"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["last_checked"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.Connected.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["connected"] = val

		val, err = v.Error.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["error"] = val

		val, err = v.LastChecked.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["last_checked"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v StatusValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v StatusValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v StatusValue) String() string {
	return "StatusValue"
}

func (v StatusValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"connected":    basetypes.BoolType{},
		"error":        basetypes.StringType{},
		"last_checked": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"connected":    v.Connected,
			"error":        v.Error,
			"last_checked": v.LastChecked,
		})

	return objVal, diags
}

func (v StatusValue) Equal(o attr.Value) bool {
	other, ok := o.(StatusValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Connected.Equal(other.Connected) {
		return false
	}

	if !v.Error.Equal(other.Error) {
		return false
	}

	if !v.LastChecked.Equal(other.LastChecked) {
		return false
	}

	return true
}

func (v StatusValue) Type(ctx context.Context) attr.Type {
	return StatusType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v StatusValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"connected":    basetypes.BoolType{},
		"error":        basetypes.StringType{},
		"last_checked": basetypes.StringType{},
	}
}
